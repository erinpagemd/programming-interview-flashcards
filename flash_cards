#!/usr/bin/env ruby
require 'highline/import'
Dir["./app/**/*.rb"].each { |f| require f }
Dir["./lib/*.rb"].each { |f| require f }

def valid?(input)
  input = input.strip
  input_regex = /\s|\d/.match(input)
  if input.nil? or input.empty? or input === input_regex
    false
  else
    true
  end

end

def get_category
  category = ask("What is the category of the question?")
  until valid?(category)
    category = ask("Please enter a valid category")
  end
  category.strip
end

def get_body
  body = ask("What is the body of the question?")
  until valid?(body)
    body = ask("Please enter a valid question body")
  end
  body.strip
end

def get_choiceA
  choiceA = ask("What is choice A for this question?")
  until valid?(choiceA)
    choiceA = ask("Please enter a valid choice A")
  end
  choiceA.strip
end

def get_choiceB
  choiceB = ask("What is choice B for this question?")
  until valid?(choiceB)
    choiceB = ask("Please enter a valid choice B")
  end
  choiceB.strip
end

def get_answer
  answer = ask("What is the correct answer for this question?")
  until valid?(answer)
    answer = ask("Please enter a or b")
  end
  answer.strip
end

def add_series
  question = "Question:\n"
  questions_controller = QuestionsController.new

  category = get_category
  body = get_body
  choiceA = get_choiceA
  choiceB = get_choiceB
  answer = get_answer

  question << "category: #{category}\n"
  question << "body: #{body}\n"
  question << "choice A: #{choiceA}\n"
  question << "choice B: #{choiceB}\n"
  question << "answer: #{answer}"

  questions_controller.add(category, body, choiceA, choiceB, answer, nil)

  question
end

def missed_questions
  say("Missed Questions\n" +
      "How does a symbol differ from a string?\n" +
      "Missed 4 times\n" +
      "Category: Ruby\n" +
      "Q: What is a Proc?\n" +
      "Missed 1 time\n" +
      "Category: Ruby\n" +
      "Enter 1 to go back\n")
end

def new_game
  say("Question 1 of 10\n" +
      "Score: 0\n" +
      "QuestionId: 5\n" +
      "Category: Ruby\n" +
      "Q: How does a symbol differ from a string?\n" +
      "a. Symbols are immutable and reusable, retaining the same object_id.\n" +
      "b. Strings are immutable and reusable, retaining the same object_id.\n" +
      "c. Symbols and strings do not differ.\n")
end

def score_dashboard
  say("Score Dashboard\n" +
      "Number of games played: 10\n" +
      "Average Score: 40%\n" +
      "Best Score: 100%\n" +
      "Enter 1 to go back\n")
end

def delete_series
  "Delete a question"
end

def admin_menu
  say(choose do |menu|
    questions_controller = QuestionsController.new

    menu.header = "Administrator Panel\n" + "Please choose from the following:\n"
    menu.choice("Add a new question") do
      say(add_series)
      admin_menu
    end
    menu.choice("Edit an existing question")
    menu.choice(delete_series)
    menu.choice("See a list of all current questions") do
      say(questions_controller.index)
      exit
    end
    menu.choice("Return to main menu") { main_menu }
  end)
end

def main_menu
  choose do |menu|
    menu.header = "Welcome to Flashcards!\n" + "Please choose from the following:\n"
    menu.choice("Play a new game") { new_game }
    menu.choice("View score dashboard") { score_dashboard }
    menu.choice("Review missed questions") { missed_questions }
    menu.choice("Administrator activities") { admin_menu }
    menu.choice("Exit") do
      say("Closing program")
      exit
    end
  end
end


ARGV_ERROR = <<EOS
run with './flash_cards'
EOS

MENU_ERROR = <<EOS
I did not recognize that. Please try again.
EOS

if ARGV.length == 0
  main_menu
else
  print ARGV_ERROR
  exit
end
